'' =================================================================================================
''
''   File....... isp_arm_6axis.spin2
''   Purpose.... Methods for moving our 6-axis arm
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2021 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jun 2021
''   Updated.... 06 Jun 2021
''
'' =================================================================================================

CON { arm specifics }

    MAX_SERVOS = 8

' which servos are on which PWM channels?
#0, CHAN_SERVO_BASE, CHAN_SERVO_SHOULDER, CHAN_SERVO_ELBOW
#4, CHAN_SERVO_WRIST_FLEX, CHAN_SERVO_WRIST_ROTATE, CHAN_SERVO_GRIP

    CHAN_SERVO_TEST_15 = 15
    CHAN_SERVO_TEST_12 = 12

' servo object indexes
#0, SERVO_BASE, SERVO_SHOULDER, SERVO_ELBOW
#3, SERVO_WRIST_FLEX, SERVO_WRIST_ROTATE, SERVO_GRIP
#6, SERVO_TEST_12, SERVO_TEST_15

    HOME_SERVO_BASE = 90            ' 1500 stopped-moving
    HOME_SERVO_SHOULDER = 109       ' 1645 uSec vertical !!
    HOME_SERVO_ELBOW = 125          ' 1774 uSec vertical !!
    HOME_SERVO_WRIST_FLEX = 95      ' 1535 uSec vertical !!
    HOME_SERVO_WRIST_ROTATE = 94    ' 1530 uSec parallel to arm
    HOME_SERVO_GRIP = 79            ' 1416 uSec mid-way

    HOME_SERVO_TEST_12 = 90
    HOME_SERVO_TEST_15 = 180

    DEFAULT_SERVO_MAX = 2200
    DEFAULT_SERVO_CENTER = 1500
    DEFAULT_SERVO_MIN = 800

    SLEW_WAIT_IN_MS = 30

    DEFAULT_GRIP_SERVO_MIN = 1074   ' open
    DEFAULT_GRIP_SERVO_MAX = 1750   ' closed

#0, MO_NONE, MO_ELBO, MO_VERTICAL, MO_BOT_DOWN, MO_TOP_DOWN, MO_RT_DOWN, MO_FRONT_DOWN, MO_LT_DOWN, MO_BACK_DOWN, MO_ARM_CANTELEVER_F, MO_ARM_CANTELEVER_B

#0, FLT_NONE, FLT_ROLL, FLT_PITCH, FLT_YAW

OBJ { our objects }

    pwmController       : "isp_i2c_pca9685"                         ' backend servo controller (ensure task has access)
    servos[MAX_SERVOS]  : "isp_i2c_pca9685_servo"                   ' our six servos
    term                : "isp_jm_serial_singleton"                 ' terminal output

VAR { TASK VARIABLES & Pins }

    LONG    pin_scl
    LONG    pin_sda
    LONG    pin_oe

    LONG    cog
    LONG    taskStack[32]

pub null()

'' This is not a top-level object

pub start(pinSCL, pinSDA, pinOE) : cog
    '' Start Servo Slew Controller cog after initializing Arm Servos

    '' Remember the output pins
    pin_scl := pinSCL
    pin_sda := pinSDA
    pin_oe := pinOE

    cog := cogspin(NEWCOG, servoSlewTask(), @taskStack) + 1                 ' start s.bus rx/decode cog
    if cog <> -1

        '' configure controller then home all arm servos
        'term.fstr0(string("** start() ENTRY\r\n"))

        waitms(3000)   ' hold for 3 secs

        term.fstr0(string("** start() SUCCESS\r\n"))
    else
        term.fstr0(string("** start() FAILURE\r\n"))

PUB stop()

    if cog                                                      ' if running
        cogstop(cog-1)                                              '  stop the cog
        cog := 0                                                    '  mark stopped

    pwmController.enableOutput(FALSE)


{
pub startEx(rxpin, p_defaults) : result | m, x

'' Start S.BUS receiver cog
'' -- rxpin is connect to S.BUS output on RC receiver
'' -- p_defaults is pointer to default values
''    * if no connection established

  stopEx()                                                        ' stop if already running

  rxp      := rxpin                                             ' configure parameters for cog
  us1ticks := clkfreq / 1_000_000
  p_chans  := @channel

  if (p_defaults > 0)                                           ' start-up values specified?
    wordmove(@channel, p_defaults, 18)                          '  copy default values

  pinclear(rxpin)                                               ' remove old settings

  x := muldiv64(clkfreq, $1_0000, 100_000) & $FFFFFC00          ' set bit timing
  x |= (9-1)                                                    ' set bits (9: 8 data, 1 parity)

  pinstart(rxpin, M_SBUS, x, 0)                                 ' start smart pin rx for S.BUS

  cog := coginit(COGEXEC_NEW, @entry, @rxp) + 1                 ' start s.bus rx/decode cog

  return cog


pub stopEx()

'' Stops S.BUS cog if running

  if (cog)                                                      ' if running
    cogstop(cog-1)                                              '  stop the cog
    cog := 0                                                    '  mark stopped

  longfill(@rxp, 0, 7)                                          ' clear object globals
  frameloss := true                                             ' force rc device to clear

  wordfill(@channel, POS_CTR, 18)                               ' initialize positions
'}

PUB homeArm()
    '' place the arm completely upright at start of run
    term.fstr0(string("** homeArm() ENTRY\r\n"))
    servos[SERVO_BASE].slewToPostion(servos.M_ANGLE, HOME_SERVO_BASE)
    servos[SERVO_SHOULDER].slewToPostion(servos.M_ANGLE, HOME_SERVO_SHOULDER)
    servos[SERVO_ELBOW].slewToPostion(servos.M_ANGLE, HOME_SERVO_ELBOW)
    servos[SERVO_WRIST_FLEX].slewToPostion(servos.M_ANGLE, HOME_SERVO_WRIST_FLEX)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_ANGLE, HOME_SERVO_WRIST_ROTATE)
    servos[SERVO_GRIP].slewToPostion(servos.M_USECS, DEFAULT_GRIP_SERVO_MAX)    ' closed
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()
    term.fstr0(string("** homeArm() EXIT\r\n"))


PUB demoPositions(loopCt) | moValue, bDidMove
    '' demo all defined postions in loop, {loopCt} times
    term.fstr1(string("** demoPositions(%d)\r\n"), loopCt)
    if loopCt < 1
        loopCt := 1

    repeat loopCt
        repeat moValue from MO_ELBO to MO_ARM_CANTELEVER_B
            bDidMove := positionArm(moValue)
            if bDidMove
                waitms(3000)   ' hold for 3 secs

    homeArm()


PRI positionArm(moVar) : bDidMove
    '' tell arm to move to specific position
    bDidMove := FALSE
    '#0, MO_NONE, MO_ELBO, MO_VERTICAL, MO_BOT_DOWN, MO_TOP_DOWN, MO_RT_DOWN, MO_FRONT_DOWN, MO_LT_DOWN, MO_BACK_DOWN, MO_ARM_CANTELEVER_F, MO_ARM_CANTELEVER_B
    case moVar
        MO_ELBO:
            'armFlatForwardYellowUp()
            'bDidMove := TRUE
        MO_VERTICAL:
            'homeArm()
            'bDidMove := TRUE
        MO_BOT_DOWN:                    '  YELLLOW UP / GREEN DOWN - OFF a bit
            armFlatForwardYellowUp()
            bDidMove := TRUE
        MO_TOP_DOWN:                    '  GREEN UP / YELLLOW DOWN
            armFlatBackGreenUp()
            bDidMove := TRUE
        MO_RT_DOWN:                     '  ORANGE UP / RED DOWN  - tilted forward, tilted right
            armFlatForwardOrangeUp()
            bDidMove := TRUE
        MO_FRONT_DOWN:                  '  CYAN UP / PURPLE DOWN
            armVertCyanUp()
            bDidMove := TRUE
        MO_LT_DOWN:                     '  RED UP / RED ORANGE  - tiled right
            armFlatBackRedUp()              ' GOOD
            bDidMove := TRUE
        MO_BACK_DOWN:                   '  PURPLE UP / CYAN DOWN
        MO_ARM_CANTELEVER_F:
            'armFlatForward()
            'bDidMove := TRUE
        MO_ARM_CANTELEVER_B:
            'armFlatBack()
            'armFlatBackYellowUp()
            'bDidMove := TRUE
        other:
            bDidMove := FALSE


{
    repeat
        servos[SERVO_TEST_15].write(servos.M_USECS, 900)
        waitms(1000)
        servos[SERVO_TEST_15].write(servos.M_USECS, 1500)
        waitms(1000)
        servos[SERVO_TEST_15].write(servos.M_USECS, 2200)
        waitms(1000)


    repeat
        repeat angle from 0 to 180 step 20
            waitms(500)
            servos[SERVO_TEST_15].write(servos.M_ANGLE, angle)
            waitms(200)

        waitms(1000)
        servos[SERVO_TEST_15].write(servos.M_ANGLE, 0)

    term.fstr0(string("** doServoSteps() EXIT\r\n"))
'}

    ' -----------------------------------------------------------------
    ' calibrate clock... pulse width
    {
    'servos[SERVO_TEST_12].start(CHAN_SERVO_TEST_12, HOME_SERVO_TEST_12)
    servos[SERVO_TEST_15].start(CHAN_SERVO_TEST_15, HOME_SERVO_TEST_15)
    waitms(8000)
    servos[SERVO_TEST_15].write(servos.M_ANGLE, 0)
    waitms(8000)

    servos[SERVO_TEST_15].write(servos.M_USECS, 800)
    waitms(8000)
    servos[SERVO_TEST_15].write(servos.M_USECS, 1500)
    waitms(8000)
    servos[SERVO_TEST_15].write(servos.M_USECS, 2200)

    repeat
    '}
    ' -----------------------------------------------------------------


PUB gripClosed()
    '' Close the jaws
    'term.fstr0(string("** gripClosed() SLEW\r\n"))
    servos[SERVO_GRIP].slewToPostion(servos.M_USECS, DEFAULT_GRIP_SERVO_MAX)

PUB gripOpen()
    '' Open the jaws
    'term.fstr0(string("** gripOpen() SLEW\r\n"))
    servos[SERVO_GRIP].slewToPostion(servos.M_USECS, DEFAULT_GRIP_SERVO_MIN)

PUB positionServo(eServo, valueInUSec, minRange, maxRange) | servoIndex, newPosnUSec
    '' Move servo to specified position (limited by its own range)
    servoIndex := SERVO_BASE #> eServo <# SERVO_GRIP   ' must be one of our 6 servos
    newPosnUSec:= servos[servoIndex].mapValueToServoPosnInUSec(valueInUSec, minRange, maxRange)
    servos[servoIndex].slewToPostion(servos.M_USECS, newPosnUSec)

PUB doServoSteps() | angle
    '' TEST METHOD stepping a single servo
    ' for( int angle =0; angle<181; angle +=20) {
    '    delay(500);
    '    pwm.setPWM(0, 0, angleToPulse(angle)
    ' };
    term.fstr0(string("\r\n** doServoSteps() ENTRY\r\n"))
    repeat
        repeat angle from 0 to 180 step 20
            waitms(500)
            servos[SERVO_TEST_15].writePosition(servos.M_ANGLE, angle)
        waitms(1000)

    term.fstr0(string("** doServoSteps() EXIT\r\n"))

PUB quietController()
    '' Setup pins so signal is quiet so we can trigger our LA
    term.fstr0(string("** quietController()\r\n"))

    pwmController.enableDebug(TRUE)
    pwmController.init(pin_scl, pin_sda, pin_oe)  ' set pins to output low... so we can set LA trigger

CON  { ---- PRIVATE Slew Control TASK ---- }


PRI servoSlewTask() : ok | bDidMove, servoIndex
    ' this is our servo slewing code...
    '  we are slewing to keep our arm momentum/inertia low
    term.fstr0(string("** servoSlewTask() running **\r\n"))
    taskInit()
    ok := taskInitController()
    if ok
        ' set pwm freq...
        pwmController.configureController()

            ' define servo ranges and such
        taskInitArmServos()
        ' place arm vertical to start with (this provides us with initial servo position as well)
        taskForceArmHome()

        repeat
            bDidMove := FALSE
            repeat servoIndex from SERVO_BASE to SERVO_GRIP
                if servos[servoIndex].isActive()
                    if not servos[servoIndex].isAtPostion()
                        servos[servoIndex].continueSlew()
                        bDidMove := TRUE
            if bDidMove
                waitms(SLEW_WAIT_IN_MS)    ' 25 sorta ok, 10 bad, 20 sorta ok too (too much rocking)
    else
        term.fstr0(string("** servoSlewTask() startup failed (no pwm dvc)\r\n"))

PRI taskInit()
    term.fstr0(string("** taskInit()\r\n"))
    pwmController.enableDebug(TRUE)
    pwmController.init(pin_scl, pin_sda, pin_oe)  ' set pins to output low... so we can set LA trigger

PRI taskInitController() : ok | deviceFound
    ' find and configure our mpu9dof device

    term.fstr0(string("** taskInitController() Setup...\r\n"))
    pwmController.enableDebug(TRUE)
    deviceFound := pwmController.start(pin_scl, pin_sda, pin_oe)                                           ' i2c @ 100kHz, no pull-ups

    term.fstr0(string("ID device address...\r\n"))
    deviceFound := pwmController.deviceID()
    ok := true
    if(deviceFound <> pwmController.DVC_NOT_FOUND)
        term.fstr1(string("Found Addr-%d\r\n"), deviceFound - 1)
    else
        term.fstr0(string("ERROR: Found no devices\r\n"))
        ok := false

    pwmController.enableDebug(FALSE)
    pwmController.enableOutput(TRUE)
    'term.fstr0(string("\r\nAccess PCA9685 16-chan PWM ...\r\n\r\n"))

PRI taskInitArmServos()
    ' configure all the servo objects with channel and limits specific to each
    pwmController.enableDebug(FALSE)
    term.fstr0(string("\r\n** taskInitArmServos() ENTRY\r\n"))
    servos[SERVO_BASE].configureMinCtrMaxType(DEFAULT_SERVO_MIN, DEFAULT_SERVO_CENTER, DEFAULT_SERVO_MAX, servos.ST_360_DEGREE)
    servos[SERVO_BASE].init(CHAN_SERVO_BASE, servos[SERVO_BASE].M_NOT_SET, 0, string("Base"))
    servos[SERVO_BASE].enableDebug(TRUE)

    servos[SERVO_SHOULDER].configureMinCtrMaxType(DEFAULT_SERVO_MIN, DEFAULT_SERVO_CENTER, DEFAULT_SERVO_MAX, servos.ST_STANDARD)
    servos[SERVO_SHOULDER].init(CHAN_SERVO_SHOULDER, servos[SERVO_SHOULDER].M_NOT_SET, 0, string("Shldr"))
    servos[SERVO_SHOULDER].enableDebug(TRUE)

    servos[SERVO_ELBOW].configureMinCtrMaxType(DEFAULT_SERVO_MIN, DEFAULT_SERVO_CENTER, DEFAULT_SERVO_MAX, servos.ST_STANDARD)
    servos[SERVO_ELBOW].init(CHAN_SERVO_ELBOW, servos[SERVO_ELBOW].M_NOT_SET, 0, string("Elbow"))
    servos[SERVO_ELBOW].enableDebug(TRUE)

    servos[SERVO_WRIST_FLEX].configureMinCtrMaxType(DEFAULT_SERVO_MIN, DEFAULT_SERVO_CENTER, DEFAULT_SERVO_MAX, servos.ST_STANDARD)
    servos[SERVO_WRIST_FLEX].init(CHAN_SERVO_WRIST_FLEX, servos.M_NOT_SET, 0, string("WrFlex"))
    servos[SERVO_WRIST_FLEX].enableDebug(TRUE)

    servos[SERVO_WRIST_ROTATE].configureMinCtrMaxType(DEFAULT_SERVO_MIN, DEFAULT_SERVO_CENTER, DEFAULT_SERVO_MAX, servos.ST_STANDARD)
    servos[SERVO_WRIST_ROTATE].init(CHAN_SERVO_WRIST_ROTATE, servos.M_NOT_SET, 0, string("WrRota"))
    servos[SERVO_WRIST_ROTATE].enableDebug(TRUE)
    servos[SERVO_WRIST_ROTATE].setSlewSteps(25) ' 25 vs. default 75 (full range slew in 25 steps)

    servos[SERVO_GRIP].configureMinCtrMaxType(DEFAULT_GRIP_SERVO_MIN, servos.CALCULATE_CENTER, DEFAULT_GRIP_SERVO_MAX, servos.ST_STANDARD)
    servos[SERVO_GRIP].init(CHAN_SERVO_GRIP, servos.M_NOT_SET, 0, string("Grip"))
    servos[SERVO_GRIP].enableDebug(TRUE)
    servos[SERVO_GRIP].setSlewSteps(25) ' 25 vs. default 75 (full range slew in 25 steps)
    term.fstr0(string("** taskInitArmServos() EXIT\r\n"))
    pwmController.enableDebug(FALSE)

PRI taskForceArmHome()
    '' place the arm completely upright at start of run
    pwmController.enableDebug(FALSE)
    term.fstr0(string("\r\n** taskForceArmHome() ENTRY\r\n"))
    servos[SERVO_BASE].writePosition(servos.M_ANGLE, HOME_SERVO_BASE)
    servos[SERVO_SHOULDER].writePosition(servos.M_ANGLE, HOME_SERVO_SHOULDER)
    servos[SERVO_ELBOW].writePosition(servos.M_ANGLE, HOME_SERVO_ELBOW)
    servos[SERVO_WRIST_FLEX].writePosition(servos.M_ANGLE, HOME_SERVO_WRIST_FLEX)
    servos[SERVO_WRIST_ROTATE].writePosition(servos.M_ANGLE, HOME_SERVO_WRIST_ROTATE)
    servos[SERVO_GRIP].writePosition(servos.M_USECS, DEFAULT_GRIP_SERVO_MAX)
    ' wait for servos to arrive at target positions
    waitms(1000)    ' sleep 1 second
    term.fstr0(string("** taskForceArmHome() EXIT\r\n"))


CON  { ---- PRIVATE Utility Methods ---- }


PRI armFlatForwardYellowUp()
    ' place the arm bent at 90 degr overhanging base
    ' YELLOW UP
    term.fstr0(string("** armFlatForwardYellowUp() SLEW\r\n"))
    servos[SERVO_BASE].slewToPostion(servos.M_ANGLE, HOME_SERVO_BASE)
    servos[SERVO_SHOULDER].slewToPostion(servos.M_ANGLE, HOME_SERVO_SHOULDER)
    servos[SERVO_ELBOW].slewToPostion(servos.M_ANGLE, 27)    ' was 8
    servos[SERVO_WRIST_FLEX].slewToPostion(servos.M_ANGLE, HOME_SERVO_WRIST_FLEX)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_ANGLE, HOME_SERVO_WRIST_ROTATE + 10)   ' 90 + 10 = 100
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

PRI armFlatForwardOrangeUp()
    ' arm flat 2nd means
    ' ORANGE UP
    term.fstr0(string("** armFlatForwardOrangeUp() SLEW\r\n"))
    ' 1700 low
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1650)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 900)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 850)   ' Orig 900
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

PRI armFlatForwardRedUp()
    ' arm flat 2nd means - grip inverted
    ' RED UP
    term.fstr0(string("** armFlatForwardRedUp() SLEW\r\n"))
    ' 1700 low
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1650)
    servos[SERVO_ELBOW].slewToPostion(servos.M_ANGLE, 20)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 2300)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

{
PRI armFlatForwardPurpleUp()
    ' arm flat 2nd means - grip ??
    ' PURPLE UP
    term.fstr0(string("** armFlatForwardPurpleUp() SLEW\r\n"))
    ' 1700 low
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1650)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 800)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 1500)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()
'}

PRI armVertCyanUp()
    ' CYAN UP
    term.fstr0(string("** armVertCyanUp() SLEW\r\n"))
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1650)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 1800)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 2200)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

PRI armFlatBack()
    ' arm flat 1st means
    term.fstr0(string("** armFlatBack() SLEW\r\n"))
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1420)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 2200)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

{
PRI armFlatBackOrangeUp()
    ' arm flat 1st means
    ' ORANGE UP
    term.fstr0(string("** armFlatBackOrangeUp() SLEW\r\n"))
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1420)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 2200)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 900)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()
'}

PRI armFlatBackRedUp()
    ' arm flat 1st means
    ' RED UP
    term.fstr0(string("** armFlatBackRedUp() SLEW\r\n"))
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1420)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 2200)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 800)   ' 2300 -> 800 when back
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

PRI armFlatBackGreenUp()
    ' arm flat 1st means
    term.fstr0(string("** armFlatBackGreenUp() SLEW\r\n"))
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1420)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 2200)
    servos[SERVO_WRIST_ROTATE].slewToPostion(servos.M_USECS, 1550)  ' orig 1500
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()


PRI armFlatForward()
    ' arm flat 2nd means
    term.fstr0(string("** armFlatForward() SLEW\r\n"))
    ' 1700 low
    servos[SERVO_SHOULDER].slewToPostion(servos.M_USECS, 1650)
    servos[SERVO_ELBOW].slewToPostion(servos.M_USECS, 800)
    ' wait for servos to arrive at target positions
    continueSlewingUntilDone()

PRI continueSlewingUntilDone() | bSlewComplete
    '' loop until all servos are at their target
    repeat
            waitms(SLEW_WAIT_IN_MS)    ' 25 sorta ok, 10 bad, 20 sorta ok too (too much rocking)
            bSlewComplete := allServosAtTarget()
    while not bSlewComplete
    term.fstr0(string("** continueSlewingUntilDone() DONE\r\n\r\n"))


PRI allServosAtTarget() : bAtTArgetStatus | servoIndex, bDoneStatus
    bAtTArgetStatus := TRUE
    repeat servoIndex from SERVO_BASE to SERVO_GRIP
        bDoneStatus := servos[servoIndex].isAtPostion()
        if not bDoneStatus
            bAtTArgetStatus := FALSE
            quit    ' outta here, we know our answer
    if bAtTArgetStatus
        term.fstr0(string("** allServosAtTarget() DONE\r\n"))
    'else
    '    term.fstr0(string("** allServosAtTarget() waiting...\r\n"))



CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2021 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
