'' =================================================================================================
''
''   File....... arm6axis_demo.spin2
''   Purpose.... Utility to demonstration interaction with the PCA9685 object
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2021 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Jun 2021
''   Updated.... 06 Jun 2021
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  BR_TERM  = 230_400                                            ' terminal baud rate

  _clkfreq = CLK_FREQ                                           ' set system clock

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }
  SD_SDI   = 59  { O }
  SD_SDO   = 58  { I }

  SDA1     = 57  { IO }                                         ' i2c (optional)
  SCL1     = 56  { IO }

CON { app io pins }

  PCA9685_SDA   = 2     ' on P2 pin 2
  PCA9685_SCL   = 1     ' on P2 pin 1
  PCA9685_OE    = 0     ' on P2 pin 0

CON { basic constants }

  #true, ON, OFF                                                ' digital control
  #0, NO, YES

  TRIES = 1                                                     ' should not be needed!

  #0, S_LIST, S_MATRIX                                          ' display styles

  STYLE = S_MATRIX                                              ' selected style


OBJ { our objects }

    arm             : "isp_arm_6axis"                           ' the arm itself
    term            : "isp_serial_singleton"                 ' terminal output
    remoteCtl       : "isp_flysky_rx"                             ' the FlySky Transmitter


VAR
    long    armCog
    long    remoteCog

PUB main() | statusOK, index
    '' Main entry point of PCA9685 demo
    setup_terminal()

    statusOK := FALSE
    arm.init(PCA9685_SCL, PCA9685_SDA, PCA9685_OE)
    quietController() ' set pins to output low... so we can set LA trigger
    wait_for_terminal(false)

    armCog := arm.start(PCA9685_SCL, PCA9685_SDA, PCA9685_OE)
    if armCog
        term.fstr1(string("-- ARM Cg%d --\r\n"), armCog - 1)
        statusOK := TRUE

        ' ---- TEST TEST TEST ----
        'remoteCtl.manualCalibrate()
        'term.fstr0(string("\r\n-- HOLD --\r\n"))
        'repeat  ' hold here for now
        ' ---- TEST TEST TEST ----
        {
        ' ----------- drive arm using controller - showing positions always
        if statusOK
            term.fstr0(string("arm remote control\r\n"))
            remoteCog := remoteCtl.setup()
            statusOK := remoteCog <> 0 ? TRUE : FALSE
            resetServoController(statusOK)
            remoteControlArm()
        '}
        '{
        ' ----------- run arm thru positions and stop
        if statusOK
            term.fstr0(string("demo()\r\n"))
            resetServoController(statusOK)
            demo()
            waitms(30000)
        '}

        {
        ' ----------- mass checks... move servo to get best speed without tipping
        if statusOK
            term.fstr0(string("waggle()\r\n"))
            resetServoController(statusOK)
            waggle()
            waitms(30000)
        '}


    tearDown()  ' stop any cogs, if needed
    term.fstr0(string("\r\nDone\r\n"))

PUB remoteControlArm() | bLastIgnoreJoyStks, bIgnoreJoySticks, eLastJawState, eJawStateSW, bDoneTesting, bLastShowState, bShowState, loopCt, bShowDebugStatus

        waitms(3000)    ' wait for 3 sec for backend to catch up

        'arm.gripClosed()
        term.fstr0(string("\r\n------------\r\n"))
        term.fstr0(string("* swA DN    - enable joystick servo control\r\n"))
        term.fstr0(string("* swB Toggle - show servo positions\r\n"))
        term.fstr0(string("* swC UP - close jaw\r\n"))
        term.fstr0(string("* swC MID - partial open jaw\r\n"))
        term.fstr0(string("* swC DN - open jaw\r\n"))
        term.fstr0(string("* swD DN - end control\r\n"))
        term.fstr0(string("------------\r\n\r\n"))

        eLastJawState := -2 ' value can't happen
        bLastShowState := -2 ' value can't happen
        bLastIgnoreJoyStks := -2 ' value can't happen

        loopCt := 0
        repeat

            bShowDebugStatus := loopCt < 2 ? TRUE : FALSE
            remoteCtl.showDebug(bShowDebugStatus)

            ' SwA open/close JAW
            bIgnoreJoySticks := remoteCtl.swIsOn(remoteCtl.CTL_SW_A)
            bShowState := remoteCtl.swIsOn(remoteCtl.CTL_SW_B)
            eJawStateSW := remoteCtl.readSwitch(remoteCtl.CTL_SW_C)
            bDoneTesting := remoteCtl.swIsOff(remoteCtl.CTL_SW_D)

            if bLastShowState == -2
                bLastShowState := bShowState

            if bLastIgnoreJoyStks == -2
                bLastIgnoreJoyStks := bIgnoreJoySticks

            if bShowState <> bLastShowState
                showServoPositions()
                bLastShowState := bShowState

            if eJawStateSW <> eLastJawState
                term.fstr0(string("-- JAW change --\r\n"))
                case eJawStateSW
                    remoteCtl.SST_OFF:
                        term.fstr0(string("  Jaw Open\r\n"))
                        arm.gripOpen()
                    remoteCtl.SST_MID:
                        term.fstr0(string("  Jaw Mid-Open\r\n"))
                        arm.gripMidOpen()
                    remoteCtl.SST_ON:
                        arm.gripClosed()
                        term.fstr0(string("  Jaw Close\r\n"))
                    other:
                        term.fstr1(string("** ERROR  swC value=%d UNKNOWN\r\n"), eJawStateSW)
                eLastJawState := eJawStateSW

            if bLastIgnoreJoyStks <> bIgnoreJoySticks
                if bIgnoreJoySticks
                    term.fstr0(string("  SERVO CTL OFF\r\n"))
                else
                    term.fstr0(string("  SERVO CTL enabled\r\n"))
                bLastIgnoreJoyStks := bIgnoreJoySticks

            if not bIgnoreJoySticks
                updPosnBothJoy(1)

            if bDoneTesting
                term.fstr0(string("--> quit loop\r\n"))
                quit

            waitms(250) ' wait 1/4 second, before next loop
            loopCt++

        ' done, reset arm
        arm.homeArm()


PRI showServoPositions()
    term.fstr0(string("\r\n--- SERVOS ---\r\n"))
    ' add code here
    arm.showservoPositions()
    term.fstr0(string("--------------\r\n\r\n"))

PRI updPosnBothJoy(nLoopCount) | posn, rngMin, rngMax
    ' loop on joysitck values forwarding them to our servos
    if nLoopCount < 1
        nLoopCount := 1
    repeat nLoopCount
        ' swD which servo pair?
        ' route Rt Joystick Vt to Wrist Rotate
        posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_VT)
        rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_VT)
        arm.positionServo(arm.SERVO_WRIST_ROTATE, posn, rngMin, rngMax)

        ' route Rt Joystick Hz to Wrist Flex
        posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_HZ)
        rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_HZ)
        arm.positionServo(arm.SERVO_WRIST_FLEX, posn, rngMin, rngMax)

        ' route Lt Joystick Hz (spring center) to Shoulder
        posn := remoteCtl.readChannel(remoteCtl.CTL_LT_JOY_VT)
        rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_LT_JOY_VT)
        arm.positionServo(arm.SERVO_SHOULDER, posn, rngMin, rngMax)

        ' route Lt Joystick Vt to Elbow
        posn := remoteCtl.readChannel(remoteCtl.CTL_LT_JOY_HZ)
        rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_LT_JOY_HZ)
        arm.positionServo(arm.SERVO_ELBOW, posn, rngMin, rngMax)


PRI updPosnDAndRtJoy(nLoopCount) | bServoGroupUpper, posn, rngMin, rngMax
' loop on joysitck values forwarding them to our servos
    if nLoopCount < 1
        nLoopCount := 1
    repeat nLoopCount
        ' swD which servo pair?
        bServoGroupUpper := remoteCtl.swIsOff(remoteCtl.CTL_SW_D)
        if bServoGroupUpper
            ' route Rt Joystick Vt to Wrist Rotate
            posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_VT)
            rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_VT)
            arm.positionServo(arm.SERVO_WRIST_ROTATE, posn, rngMin, rngMax)

            ' route Rt Joystick Hz to Wrist Flex
            posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_HZ)
            rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_HZ)
            arm.positionServo(arm.SERVO_WRIST_FLEX, posn, rngMin, rngMax)
        else
            ' route Rt Joystick Vt to Elbow
            posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_VT)
            rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_VT)
            arm.positionServo(arm.SERVO_ELBOW, posn, rngMin, rngMax)

            ' route Rt Joystick Hz to Shoulder
            posn := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_HZ)
            rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_HZ)
            arm.positionServo(arm.SERVO_SHOULDER, posn, rngMin, rngMax)

PUB waggle()
    '' step thru servos to determine best mopve rates without tipping
    arm.waggle()

PUB demo() | loopIndex

    if armCog <> 0
        'arm.gripOpen()
        term.fstr0(string("-- [ startup ] --\r\n"))
        waitms(1000)
        'repeat' hold here
        term.fstr0(string("-- [ close grip ] --\r\n"))
        arm.gripClosed()
        waitms(2000)

        term.fstr0(string("-- [ Demo arm moves ] --\r\n"))
        'arm.doServoSteps()
        arm.demoPositions(2)
    else
        term.fstr0(string("-- [ NO arm, ABORT ] --\r\n"))

PRI quietController()

    'term.fstr0(string("Quiesce... <<  start the LA!  >>\r\n"))
    arm.quietController()

PRI tearDown()
    ' stop anything that needs to be...
    arm.stop()    ' pull ourself off the i2c bus

PRI resetServoController(ok)
    if(ok)
        'pwmController.configureController()
    term.fstr0(string("resetServoController()\r\n"))

PRI setup_terminal()
    ' start anything that needs to be
  term.start(BR_TERM)       ' start terminal io


PRI wait_for_terminal(clear)

  ' Download to RAM with F10
  ' F12 to open PST
  ' Click [Enable]
  ' Press Enter

  term.rxflush()
  term.rx()
  if (clear)
    term.tx(term.CLS)


CON { license }

{{
 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2021 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}
